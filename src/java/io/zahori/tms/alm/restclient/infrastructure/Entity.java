package io.zahori.tms.alm.restclient.infrastructure;

/*-
 * #%L
 * alm-rest-client
 * $Id:$
 * $HeadURL:$
 * %%
 * Copyright (C) 2021 PANEL SISTEMAS INFORMATICOS,S.L
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

/*

This file was generated by the JavaTM Architecture for XML Binding(JAXB)
Reference Implementation, vhudson-jaxb-ri-2.1-456
See http://www.oracle.com/technetwork/articles/javase/index-140168.html
Any modifications to this file will be lost upon recompilation of the source schema.


This example of an automatically generated class is an example of how one can
generate classes from XSDs via xjc to match jaxb standards.
XSD is a format for describing a class structure
(note: the CLASS not an INSTANCE of the class).
From an XSD one can generate a class java source file.
When compiling this source file, one can "marshal" an actual object instance
from the XML describing the object (this time we are talking about an instance,
not a class).

this process has many advantages, and is a form of serialization that is not
language dependent.
This is the recommended way of working with entities, though we do suggest you
customize your entity class with simpler accessors.


*/

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import io.zahori.tms.alm.restclient.infrastructure.Entity.Fields.Field;

/**
 * The type Entity.
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "fields" })
@XmlRootElement(name = "Entity")
public class Entity {

	/**
	 * The Fields.
	 */
	@XmlElement(name = "Fields", required = true)
	protected Entity.Fields fields;
	/**
	 * The Type.
	 */
	@XmlAttribute(name = "Type", required = true)
	protected String type;

	/**
	 * Instantiates a new Entity.
	 *
	 * @param entity the entity
	 */
	public Entity(Entity entity) {
		type = entity.getType();
		fields = new Entity.Fields();

	}

	/**
	 * Instantiates a new Entity.
	 *
	 * @param type the type
	 */
	public Entity(String type) {
		this.type = type;
		fields = new Entity.Fields();

	}

	/**
	 * Instantiates a new Entity.
	 */
	public Entity() {
		fields = new Entity.Fields();

	}

	/**
	 * To string string.
	 *
	 * @return the string
	 */
	@Override
	public String toString() {
		return "Entity: " + fields;
	}

	/**
	 * Gets field.
	 *
	 * @param name the name
	 * @return the field
	 */
	public String getField(String name) {
		for (final Field field : fields.getField()) {
			if (name.equals(field.getName()))
				return field.getValue().get(0);
		}
		return null;
	}

	/**
	 * Gets fields.
	 *
	 * @return the fields
	 */
	public Entity.Fields getFields() {
		return fields;
	}

	/**
	 * Sets fields.
	 *
	 * @param value the value
	 */
	public void setFields(Entity.Fields value) {
		this.fields = value;
	}

	/**
	 * Add field.
	 *
	 * @param name  the name
	 * @param value the value
	 */
	public void addField(String name, String value) {
		this.fields.setField(name, value);
	}

	/**
	 * Add field.
	 *
	 * @param name   the name
	 * @param values the values
	 */
	public void addField(String name, String... values) {
		this.fields.setField(name, values);
	}

	/**
	 * Gets type.
	 *
	 * @return the type
	 */
	public String getType() {
		return type;
	}

	/**
	 * Sets type.
	 *
	 * @param value the value
	 */
	public void setType(String value) {
		this.type = value;
	}

	/**
	 * The type Fields.
	 */
	@XmlAccessorType(XmlAccessType.FIELD)
	@XmlType(name = "", propOrder = { "field" })
	public static class Fields {

		/**
		 * The Field.
		 */
		@XmlElement(name = "Field", required = true)
		protected List<Field> field;

		/**
		 * Instantiates a new Fields.
		 *
		 * @param fields the fields
		 */
		public Fields(Fields fields) {
			field = new ArrayList<Field>(fields.getField());
		}

		/**
		 * Instantiates a new Fields.
		 */
		public Fields() {
			field = new ArrayList<Field>();
		}

		/**
		 * To string string.
		 *
		 * @return the string
		 */
		@Override
		public String toString() {
			return field.toString();
		}

		/**
		 * Gets field.
		 *
		 * @return the field
		 */
		public List<Field> getField() {
			if (field == null) {
				field = new ArrayList<Field>();
			}
			return this.field;
		}

		/**
		 * Sets field.
		 *
		 * @param name  the name
		 * @param value the value
		 */
		public void setField(String name, String value) {
			field.add(new Field(name, value));
		}

		/**
		 * Sets field.
		 *
		 * @param name   the name
		 * @param values the values
		 */
		public void setField(String name, String... values) {
			field.add(new Field(name, values));
		}

		/**
		 * The type Field.
		 */
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = { "value" })
		public static class Field {

			/**
			 * The Value.
			 */
			@XmlElement(name = "Value", required = true)
			protected List<String> value;
			/**
			 * The Name.
			 */
			@XmlAttribute(name = "Name", required = true)
			protected String name;

			/**
			 * Instantiates a new Field.
			 */
			public Field() {
			}

			/**
			 * Instantiates a new Field.
			 *
			 * @param name  the name
			 * @param value the value
			 */
			public Field(String name, String value) {
				this.name = name;
				this.value = new ArrayList<String>();
				this.value.add(value);
			}

			/**
			 * Instantiates a new Field.
			 *
			 * @param name   the name
			 * @param values the values
			 */
			public Field(String name, String... values) {
				this.name = name;
				this.value = new ArrayList<String>(Arrays.asList(values));
			}

			/**
			 * To string string.
			 *
			 * @return the string
			 */
			@Override
			public String toString() {
				return name + "=" + value;
			}

			/**
			 * Gets value.
			 *
			 * @return the value
			 */
			public List<String> getValue() {
				if (value == null) {
					value = new ArrayList<String>();
				}
				return this.value;
			}

			/**
			 * Gets name.
			 *
			 * @return the name
			 */
			public String getName() {
				return name;
			}

			/**
			 * Sets name.
			 *
			 * @param value the value
			 */
			public void setName(String value) {
				this.name = value;
			}

		}

	}

}
